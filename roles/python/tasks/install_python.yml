- name: Install dependencies
  ansible.builtin.package:
    name:
      - build-essential
      - libssl-dev
      - libsqlite3-dev
      - libbz2-dev
      - libgdbm-dev
      - libncurses5-dev
      - libncursesw5-dev
      - libreadline-dev
      - zlib1g-dev
      - libffi-dev
      - liblzma-dev
    state: present
  become: true

- name: Create a temporary directory
  ansible.builtin.file:
    path: "/tmp/Python-{{ python_version }}"
    state: directory

- name: "Download Python {{ python_version }}"
  ansible.builtin.get_url:
    url: "https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tgz"
    dest: "/tmp/Python-{{ python_version }}.tgz"

- name: Extract Python
  ansible.builtin.unarchive:
    src: "/tmp/Python-{{ python_version }}.tgz"
    dest: /tmp/
    remote_src: true

- name: Configure Python build
  ansible.builtin.command:
    cmd: ./configure --enable-optimizations --with-ensurepip=install --with-lto
    chdir: "/tmp/Python-{{ python_version }}"
  become: true

- name: Build Python
  ansible.builtin.command:
    cmd: make -j "{{ ansible_processor_count }}"
    chdir: "/tmp/Python-{{ python_version }}"
  become: true

- name: Install Python
  ansible.builtin.command:
    cmd: make altinstall
    chdir: "/tmp/Python-{{ python_version }}"
  become: true

- name: Remove the downloaded tarball
  ansible.builtin.file:
    path: "/tmp/Python-{{ python_version }}.tgz"
    state: absent

- name: Install uv package
  ansible.builtin.pip:
    name: uv
    executable: "pip{{ python_major_minor_version }}"
